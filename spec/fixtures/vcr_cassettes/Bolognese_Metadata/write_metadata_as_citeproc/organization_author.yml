---
http_interactions:
- request:
    method: get
    uri: https://api.crossref.org/works/10.1186/s13742-015-0103-4/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.9; mailto:info@datacite.org)
      Accept:
      - text/xml
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.1186/s13742-015-0103-4>; rel="canonical", <http://link.springer.com/content/pdf/10.1186/s13742-015-0103-4.pdf>;
        version="vor"; type="application/pdf"; rel="item", <http://link.springer.com/article/10.1186/s13742-015-0103-4/fulltext.html>;
        version="vor"; type="text/html"; rel="item", <http://academic.oup.com/gigascience/article-pdf/4/1/1/10893879/13742_2015_Article_103.pdf>;
        version="vor"; rel="item", <http://link.springer.com/content/pdf/10.1186/s13742-015-0103-4.pdf>;
        version="vor"; type="application/pdf"; rel="item", <http://www.springer.com/tdm>;
        rel="license"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '23251'
      Server:
      - http-kit
      Date:
      - Sun, 06 Jun 2021 11:54:50 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Permissions-Policy:
      - interest-cohort=()
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Sun, 06 Jun 2021 11:54:42 GMT
recorded_with: VCR 3.0.3
