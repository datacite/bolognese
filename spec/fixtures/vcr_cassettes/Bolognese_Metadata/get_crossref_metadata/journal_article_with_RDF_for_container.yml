---
http_interactions:
- request:
    method: get
    uri: https://doi.org/ra/10.1163
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.9.4; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
      Accept-Encoding:
      - gzip,deflate
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Wed, 09 Jun 2021 12:56:24 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 0a92717dcb0000bf14e0218000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Report-To:
      - '{"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v2?s=baeTKtkRLr9E6xUX%2BqHu2iXMDTHjq8ijy7OQUlP4mJt0VkRB9mvt4pcF%2BOEO4e8kpJ2XYqBjpe7pIO1rfUGky84r8UPwF4QORIwPHIR13qiKruUB%2FpE3098GHnp%2BAn1f"}],"group":"cf-nel","max_age":604800}'
      Nel:
      - '{"report_to":"cf-nel","max_age":604800}'
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Server:
      - cloudflare
      Cf-Ray:
      - 65ca850fadf8bf14-FRA
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400, h3=":443";
        ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        H4sIAAAAAAAAA4vmUlCoBmIFBSUXf08lKwUlQwM9Q0MzYyUdiGiQI0jQuSi/uLgoNU0JKFjLFQsAqrH6/DYAAAA=
    http_version:
  recorded_at: Wed, 09 Jun 2021 12:56:24 GMT
- request:
    method: get
    uri: https://api.crossref.org/works/10.1163/1937240x-00002096/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.9.4; mailto:info@datacite.org)
      Accept:
      - text/xml;charset=utf-8
      Accept-Encoding:
      - gzip,deflate
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.1163/1937240x-00002096>; rel="canonical", <http://academic.oup.com/jcb/article-pdf/32/6/949/10336473/jcb0949.pdf>;
        version="vor"; rel="item"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '59976'
      Server:
      - http-kit
      Date:
      - Wed, 09 Jun 2021 12:56:24 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Permissions-Policy:
      - interest-cohort=()
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 09 Jun 2021 12:56:25 GMT
recorded_with: VCR 3.0.3
