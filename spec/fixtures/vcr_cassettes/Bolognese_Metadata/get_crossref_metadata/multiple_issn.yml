---
http_interactions:
- request:
    method: get
    uri: https://doi.org/ra/10.1007
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.9; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Sun, 06 Jun 2021 11:56:43 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Connection:
      - keep-alive
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 0a82c7c7c700000621743f0000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Report-To:
      - '{"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v2?s=zTjeML46bQAIf5jGFDSrESE%2Fh%2Fzl1OzPhHcmTk1Ciu0CXZfq6YrumzttsJ955XhFiNVhWru312q4PEMfxgKh7NT5jfT3vheu9133F2yshV2luDiiA4eSz8Nc6DJcuuM8"}],"group":"cf-nel","max_age":604800}'
      Nel:
      - '{"report_to":"cf-nel","max_age":604800}'
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Server:
      - cloudflare
      Cf-Ray:
      - 65b175860a1b0621-FRA
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400, h3=":443";
        ma=86400
    body:
      encoding: ASCII-8BIT
      string: |-
        [
          {
            "DOI": "10.1007",
            "RA": "Crossref"
          }
        ]
    http_version:
  recorded_at: Sun, 06 Jun 2021 11:56:35 GMT
- request:
    method: get
    uri: https://api.crossref.org/works/10.1007/978-3-642-34922-5_19/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.9; mailto:info@datacite.org)
      Accept:
      - text/xml
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.1007/978-3-642-34922-5_19>; rel="canonical", <http://link.springer.com/content/pdf/10.1007/978-3-642-34922-5_19.pdf>;
        version="vor"; rel="item"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '20438'
      Server:
      - http-kit
      Date:
      - Sun, 06 Jun 2021 11:56:44 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Permissions-Policy:
      - interest-cohort=()
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Sun, 06 Jun 2021 11:56:35 GMT
recorded_with: VCR 3.0.3
