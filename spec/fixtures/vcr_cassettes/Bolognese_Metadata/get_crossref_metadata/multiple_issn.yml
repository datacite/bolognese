---
http_interactions:
- request:
    method: get
    uri: https://doi.org/ra/10.1007
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.7.2; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Mon, 12 Oct 2020 21:10:28 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Connection:
      - keep-alive
      Set-Cookie:
      - __cfduid=d46720dbaaa6164af527771d3ccf0993e1602537028; expires=Wed, 11-Nov-20
        21:10:28 GMT; path=/; domain=.doi.org; HttpOnly; SameSite=Lax; Secure
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 05c03f924a0000dfd3801da200000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Report-To:
      - '{"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report?lkg-colo=71&lkg-time=1602537028"}],"group":"cf-nel","max_age":604800}'
      Nel:
      - '{"report_to":"cf-nel","max_age":604800}'
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Server:
      - cloudflare
      Cf-Ray:
      - 5e13ceca1d6bdfd3-FRA
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |-
        [
          {
            "DOI": "10.1007",
            "RA": "Crossref"
          }
        ]
    http_version:
  recorded_at: Mon, 12 Oct 2020 21:10:28 GMT
- request:
    method: get
    uri: https://api.crossref.org/works/10.1007/978-3-642-34922-5_19/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.7.2; mailto:info@datacite.org)
      Accept:
      - text/xml
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.1007/978-3-642-34922-5_19>; rel="canonical", <http://www.springerlink.com/index/pdf/10.1007/978-3-642-34922-5_19>;
        version="vor"; rel="item"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '20454'
      Server:
      - http-kit
      Date:
      - Mon, 12 Oct 2020 21:10:29 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Mon, 12 Oct 2020 21:10:29 GMT
recorded_with: VCR 3.0.3
