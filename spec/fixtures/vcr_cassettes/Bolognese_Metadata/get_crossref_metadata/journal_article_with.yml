---
http_interactions:
- request:
    method: get
    uri: https://doi.org/ra/10.1111
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.9; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Sun, 06 Jun 2021 11:56:48 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Connection:
      - keep-alive
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 0a82c7dab90000d6d162a1b000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Report-To:
      - '{"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v2?s=9CxNgnUfwgm29RaIyMacliH%2FQDzL%2FEVADaFxHu4UleJMe1vvaMsBMbrorZErMKgxKQF8shpptKqGPRQJaleUmcg8YUTfkfupl4Pr404K5XBlj1CPn6CatvYSpJaVkdJv"}],"group":"cf-nel","max_age":604800}'
      Nel:
      - '{"report_to":"cf-nel","max_age":604800}'
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Server:
      - cloudflare
      Cf-Ray:
      - 65b175a45f63d6d1-FRA
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400, h3=":443";
        ma=86400
    body:
      encoding: ASCII-8BIT
      string: |-
        [
          {
            "DOI": "10.1111",
            "RA": "Crossref"
          }
        ]
    http_version:
  recorded_at: Sun, 06 Jun 2021 11:56:40 GMT
- request:
    method: get
    uri: https://api.crossref.org/works/10.1111/nph.14619/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.9; mailto:info@datacite.org)
      Accept:
      - text/xml
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.1111/nph.14619>; rel="canonical", <https://api.wiley.com/onlinelibrary/tdm/v1/articles/10.1111%2Fnph.14619>;
        version="vor"; type="application/pdf"; rel="item", <http://onlinelibrary.wiley.com/wol1/doi/10.1111/nph.14619/fullpdf>;
        version="vor"; rel="item", <http://doi.wiley.com/10.1002/tdm_license_1.1>;
        version="tdm"; rel="license", <http://onlinelibrary.wiley.com/termsAndConditions#vor>;
        version="vor"; rel="license", <http://orcid.org/0000-0002-4156-3761>; title="Nico
        Dissmeyer"; rel="author", <http://orcid.org/0000-0003-3548-8213>; title="Emmanuelle
        Graciet"; rel="author"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '38469'
      Server:
      - http-kit
      Date:
      - Sun, 06 Jun 2021 11:56:49 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Permissions-Policy:
      - interest-cohort=()
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Sun, 06 Jun 2021 11:56:40 GMT
recorded_with: VCR 3.0.3
