---
http_interactions:
- request:
    method: get
    uri: https://doi.org/ra/10.1007
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.9.4; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
      Accept-Encoding:
      - gzip,deflate
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Wed, 09 Jun 2021 12:56:26 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 0a927187b900004e0e82861000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Report-To:
      - '{"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v2?s=hiXcgAapdS3wLQ1G%2FLxy08%2BdChhQgsA8B6Y7QbrPS9uhNR0wr51ReSZC2qlGpIt2t24wggKVJPRdwCGIwEWvsDFonh9eLPTQ%2BUPcix7W%2B7cogVairE3h9QrdimRJg6%2F0"}],"group":"cf-nel","max_age":604800}'
      Nel:
      - '{"report_to":"cf-nel","max_age":604800}'
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Server:
      - cloudflare
      Cf-Ray:
      - 65ca851f8d514e0e-FRA
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400, h3=":443";
        ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        H4sIAAAAAAAAA4vmUlCoBmIFBSUXf08lKwUlQwM9QwMDcyUdiGiQI0jQuSi/uLgoNU0JKFjLFQsAxkrz2jYAAAA=
    http_version:
  recorded_at: Wed, 09 Jun 2021 12:56:26 GMT
- request:
    method: get
    uri: https://api.crossref.org/works/10.1007/978-3-319-75889-3_1/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.9.4; mailto:info@datacite.org)
      Accept:
      - text/xml;charset=utf-8
      Accept-Encoding:
      - gzip,deflate
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.1007/978-3-319-75889-3_1>; rel="canonical", <http://link.springer.com/content/pdf/10.1007/978-3-319-75889-3_1>;
        version="vor"; rel="item", <http://www.springer.com/tdm>; rel="license", <http://www.springer.com/tdm>;
        rel="license"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '30784'
      Server:
      - http-kit
      Date:
      - Wed, 09 Jun 2021 12:56:27 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Permissions-Policy:
      - interest-cohort=()
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 09 Jun 2021 12:56:27 GMT
recorded_with: VCR 3.0.3
