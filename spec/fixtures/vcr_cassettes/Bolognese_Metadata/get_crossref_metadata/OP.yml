---
http_interactions:
- request:
    method: get
    uri: https://doi.org/ra/10.2903
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.9; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Sun, 06 Jun 2021 11:57:10 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Connection:
      - keep-alive
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 0a82c82ec8000005d09b361000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Report-To:
      - '{"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v2?s=0rQbhWTDvPIEqzEN23PFlRGxSVy0tkBFMwxDpFHpPJnH%2FLhkN1uSkk%2Ft2jCQMJErmfBgNpAa3SkrdjaJxpoB6UU9vb19GO4PxBF%2FOeyAIRC6DgjWiBB0iJyO%2BniAMC16"}],"group":"cf-nel","max_age":604800}'
      Nel:
      - '{"report_to":"cf-nel","max_age":604800}'
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Server:
      - cloudflare
      Cf-Ray:
      - 65b1762addf405d0-FRA
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400, h3=":443";
        ma=86400
    body:
      encoding: ASCII-8BIT
      string: |-
        [
          {
            "DOI": "10.2903",
            "RA": "OP"
          }
        ]
    http_version:
  recorded_at: Sun, 06 Jun 2021 11:57:01 GMT
- request:
    method: get
    uri: https://api.crossref.org/works/10.2903/j.efsa.2018.5239/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.9; mailto:info@datacite.org)
      Accept:
      - text/xml
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.2903/j.efsa.2018.5239>; rel="canonical", <https://api.wiley.com/onlinelibrary/tdm/v1/articles/10.2903/j.efsa.2018.5239>;
        version="vor"; type="application/pdf"; rel="item", <http://onlinelibrary.wiley.com/wol1/doi/10.2903/j.efsa.2018.5239/fullpdf>;
        version="vor"; rel="item"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '137052'
      Server:
      - http-kit
      Date:
      - Sun, 06 Jun 2021 11:57:10 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Permissions-Policy:
      - interest-cohort=()
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Sun, 06 Jun 2021 11:57:02 GMT
recorded_with: VCR 3.0.3
