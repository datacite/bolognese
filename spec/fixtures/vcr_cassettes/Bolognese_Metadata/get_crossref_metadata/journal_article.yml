---
http_interactions:
- request:
    method: get
    uri: https://doi.org/ra/10.1371
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.9; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Sun, 06 Jun 2021 11:57:12 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Connection:
      - keep-alive
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 0a82c836fc0000c27ccb9b4000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Report-To:
      - '{"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v2?s=BTwLHjSGAgMvmzN4SSZHlY99j0dI6MKAgVy1Kd2D2rF1InS06%2BUAWZaPqhVX17jVIaJdBxo8KOO4y7HE2ccZ2%2FiteJMzcjKODqIEovgPC2vAHOFmdbZyG3w5ZaZaPr0D"}],"group":"cf-nel","max_age":604800}'
      Nel:
      - '{"report_to":"cf-nel","max_age":604800}'
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Server:
      - cloudflare
      Cf-Ray:
      - 65b17637ed8dc27c-FRA
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400, h3=":443";
        ma=86400
    body:
      encoding: ASCII-8BIT
      string: |-
        [
          {
            "DOI": "10.1371",
            "RA": "Crossref"
          }
        ]
    http_version:
  recorded_at: Sun, 06 Jun 2021 11:57:03 GMT
- request:
    method: get
    uri: https://api.crossref.org/works/10.1371/journal.pone.0000030/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.9; mailto:info@datacite.org)
      Accept:
      - text/xml
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.1371/journal.pone.0000030>; rel="canonical", <http://dx.plos.org/10.1371/journal.pone.0000030>;
        version="vor"; rel="item", <http://creativecommons.org/licenses/by/4.0/>;
        rel="license"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '49017'
      Server:
      - http-kit
      Date:
      - Sun, 06 Jun 2021 11:57:12 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Permissions-Policy:
      - interest-cohort=()
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Sun, 06 Jun 2021 11:57:04 GMT
recorded_with: VCR 3.0.3
