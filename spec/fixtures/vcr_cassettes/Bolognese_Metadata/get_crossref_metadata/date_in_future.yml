---
http_interactions:
- request:
    method: get
    uri: https://doi.org/ra/10.1016
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.9; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Sun, 06 Jun 2021 11:56:57 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Connection:
      - keep-alive
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 0a82c7fb2400002b3587143000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Report-To:
      - '{"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v2?s=LoJCQ54XamFm%2B3jRZlz4GPRgDUucbnGHgG9eUa3ijjQb4vn%2B6vz822BwQTsXWSOTgpw%2FDuvofSUHj5v9WVlmTHaVYuMaRLsUKr4M90PDb1PHAHgCnzxou7vckUgRJ0bi"}],"group":"cf-nel","max_age":604800}'
      Nel:
      - '{"report_to":"cf-nel","max_age":604800}'
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Server:
      - cloudflare
      Cf-Ray:
      - 65b175d83b152b35-FRA
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400, h3=":443";
        ma=86400
    body:
      encoding: ASCII-8BIT
      string: |-
        [
          {
            "DOI": "10.1016",
            "RA": "Crossref"
          }
        ]
    http_version:
  recorded_at: Sun, 06 Jun 2021 11:56:48 GMT
- request:
    method: get
    uri: https://api.crossref.org/works/10.1016/j.ejphar.2015.03.018/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.9; mailto:info@datacite.org)
      Accept:
      - text/xml
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.1016/j.ejphar.2015.03.018>; rel="canonical", <https://api.elsevier.com/content/article/PII:S0014299915002332?httpAccept=text/xml>;
        version="vor"; type="text/xml"; rel="item", <https://api.elsevier.com/content/article/PII:S0014299915002332?httpAccept=text/plain>;
        version="vor"; type="text/plain"; rel="item", <https://www.elsevier.com/tdm/userlicense/1.0/>;
        version="tdm"; rel="license"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '65307'
      Server:
      - http-kit
      Date:
      - Sun, 06 Jun 2021 11:56:57 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Permissions-Policy:
      - interest-cohort=()
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Sun, 06 Jun 2021 11:56:49 GMT
recorded_with: VCR 3.0.3
