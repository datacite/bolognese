---
http_interactions:
- request:
    method: get
    uri: https://doi.org/ra/10.1038
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.9.4; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
      Accept-Encoding:
      - gzip,deflate
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Wed, 09 Jun 2021 12:56:56 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 0a9271fa4300002bad488f1000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Report-To:
      - '{"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v2?s=BAqbIiwdm%2B8RVf9dOWU%2BgEPLvKET3VVG8ZGEOEqPj9U%2Bz0sJBuDjrY%2FG6C5pLQjPFEE5enz1TEg7Xi5buGEWPSnL%2FD%2FFQoIRW1BqRuPlsvpNjXJKTT0OSg2L3emsgCmp"}],"group":"cf-nel","max_age":604800}'
      Nel:
      - '{"report_to":"cf-nel","max_age":604800}'
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Server:
      - cloudflare
      Cf-Ray:
      - 65ca85d6d9e92bad-FRA
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400, h3=":443";
        ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        H4sIAAAAAAAAA4vmUlCoBmIFBSUXf08lKwUlQwM9QwNjCyUdiGiQI0jQuSi/uLgoNU0JKFjLFQsAjMSPRDYAAAA=
    http_version:
  recorded_at: Wed, 09 Jun 2021 12:56:56 GMT
- request:
    method: get
    uri: https://api.crossref.org/works/10.1038/hdy.2013.26/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.9.4; mailto:info@datacite.org)
      Accept:
      - text/xml;charset=utf-8
      Accept-Encoding:
      - gzip,deflate
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.1038/hdy.2013.26>; rel="canonical", <http://www.nature.com/articles/hdy201326.pdf>;
        version="vor"; type="application/pdf"; rel="item", <http://www.nature.com/articles/hdy201326>;
        version="vor"; type="text/html"; rel="item", <http://www.nature.com/articles/hdy201326.pdf>;
        version="vor"; type="application/pdf"; rel="item", <http://www.springer.com/tdm>;
        version="tdm"; rel="license"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '29875'
      Server:
      - http-kit
      Date:
      - Wed, 09 Jun 2021 12:56:56 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Permissions-Policy:
      - interest-cohort=()
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 09 Jun 2021 12:56:56 GMT
recorded_with: VCR 3.0.3
