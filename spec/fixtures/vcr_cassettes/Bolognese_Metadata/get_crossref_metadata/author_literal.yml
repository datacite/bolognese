---
http_interactions:
- request:
    method: get
    uri: https://doi.org/ra/10.1038
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.9.4; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
      Accept-Encoding:
      - gzip,deflate
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Wed, 09 Jun 2021 12:56:32 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 0a92719d8c00004e920030f000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Report-To:
      - '{"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v2?s=4z6KNCcFA0URUoLEDDHTVTd9FfQK0QYSzLBQxrutJGxURwPtkt7Xn%2BmJV7O%2FCCJVoxZda7xLFAr7T2MyuTdrwxL%2Bpa7e5FIa5WteWGtHC3CEF4qX3oAWYX1Pq9SL4TNk"}],"group":"cf-nel","max_age":604800}'
      Nel:
      - '{"report_to":"cf-nel","max_age":604800}'
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Server:
      - cloudflare
      Cf-Ray:
      - 65ca85427c934e92-FRA
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400, h3=":443";
        ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        H4sIAAAAAAAAA4vmUlCoBmIFBSUXf08lKwUlQwM9QwNjCyUdiGiQI0jQuSi/uLgoNU0JKFjLFQsAjMSPRDYAAAA=
    http_version:
  recorded_at: Wed, 09 Jun 2021 12:56:32 GMT
- request:
    method: get
    uri: https://api.crossref.org/works/10.1038/ng.3834/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.9.4; mailto:info@datacite.org)
      Accept:
      - text/xml;charset=utf-8
      Accept-Encoding:
      - gzip,deflate
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.1038/ng.3834>; rel="canonical", <http://www.nature.com/articles/ng.3834.pdf>;
        version="vor"; type="application/pdf"; rel="item", <http://www.nature.com/articles/ng.3834>;
        version="vor"; type="text/html"; rel="item", <http://www.nature.com/doifinder/10.1038/ng.3834>;
        version="vor"; rel="item", <http://www.nature.com/articles/ng.3834.pdf>; version="vor";
        type="application/pdf"; rel="item", <http://www.springer.com/tdm>; version="tdm";
        rel="license", <http://orcid.org/0000-0002-1930-9265>; title="Alexandra J
        Scott"; rel="author", <http://orcid.org/0000-0001-7287-6448>; title="Emily
        K Tsang"; rel="author", <http://orcid.org/0000-0002-8762-622X>; title="Liron
        Ganel"; rel="author", <http://orcid.org/0000-0002-5287-627X>; title="Alexis
        Battle"; rel="author", <http://orcid.org/0000-0003-3828-8970>; title="Donald
        F Conrad"; rel="author"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '41408'
      Server:
      - http-kit
      Date:
      - Wed, 09 Jun 2021 12:56:33 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Permissions-Policy:
      - interest-cohort=()
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 09 Jun 2021 12:56:33 GMT
recorded_with: VCR 3.0.3
