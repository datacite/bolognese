---
http_interactions:
- request:
    method: get
    uri: https://doi.org/ra/10.3389
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.9.4; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
      Accept-Encoding:
      - gzip,deflate
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Wed, 09 Jun 2021 12:56:52 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 0a9271eb9200001f3d11a16000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Report-To:
      - '{"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v2?s=Qqtxf1Xzvtb0eoefIn1%2BgAs9uQfVGQQs%2FQJKQuuDyTc2jdysxs8s1PsH9AvvreADwqXlJlQXJ3VU3LGMo0xkPE4CjNsjZGnlXogU%2BAVjotoNoskaFNgEr8qBikue3euH"}],"group":"cf-nel","max_age":604800}'
      Nel:
      - '{"report_to":"cf-nel","max_age":604800}'
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Server:
      - cloudflare
      Cf-Ray:
      - 65ca85bf4d8d1f3d-FRA
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400, h3=":443";
        ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        H4sIAAAAAAAAA4vmUlCoBmIFBSUXf08lKwUlQwM9Y2MLSyUdiGiQI0jQuSi/uLgoNU0JKFjLFQsAJnECuDYAAAA=
    http_version:
  recorded_at: Wed, 09 Jun 2021 12:56:52 GMT
- request:
    method: get
    uri: https://api.crossref.org/works/10.3389/fpls.2019.00816/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.9.4; mailto:info@datacite.org)
      Accept:
      - text/xml;charset=utf-8
      Accept-Encoding:
      - gzip,deflate
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.3389/fpls.2019.00816>; rel="canonical", <https://www.frontiersin.org/article/10.3389/fpls.2019.00816/full>;
        version="vor"; rel="item", <https://creativecommons.org/licenses/by/4.0/>;
        version="vor"; rel="license"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '44181'
      Server:
      - http-kit
      Date:
      - Wed, 09 Jun 2021 12:56:53 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Permissions-Policy:
      - interest-cohort=()
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 09 Jun 2021 12:56:53 GMT
recorded_with: VCR 3.0.3
