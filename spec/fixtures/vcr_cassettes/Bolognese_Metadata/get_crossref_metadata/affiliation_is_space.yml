---
http_interactions:
- request:
    method: get
    uri: https://doi.org/ra/10.1177
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.7.2; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Mon, 12 Oct 2020 20:19:19 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Connection:
      - keep-alive
      Set-Cookie:
      - __cfduid=d3fd7e0786c5b0c861cf006b8b0b48f451602533959; expires=Wed, 11-Nov-20
        20:19:19 GMT; path=/; domain=.doi.org; HttpOnly; SameSite=Lax; Secure
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 05c010be770000d6fd45a0e200000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Report-To:
      - '{"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report?lkg-colo=71&lkg-time=1602533959"}],"group":"cf-nel","max_age":604800}'
      Nel:
      - '{"report_to":"cf-nel","max_age":604800}'
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Server:
      - cloudflare
      Cf-Ray:
      - 5e1383dd8d78d6fd-FRA
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |-
        [
          {
            "DOI": "10.1177",
            "RA": "Crossref"
          }
        ]
    http_version:
  recorded_at: Mon, 12 Oct 2020 20:19:19 GMT
- request:
    method: get
    uri: https://api.crossref.org/works/10.1177/0042098011428175/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.7.2; mailto:info@datacite.org)
      Accept:
      - text/xml
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.1177/0042098011428175>; rel="canonical", <http://journals.sagepub.com/doi/pdf/10.1177/0042098011428175>;
        version="vor"; type="application/pdf"; rel="item", <http://journals.sagepub.com/doi/pdf/10.1177/0042098011428175>;
        version="vor"; rel="item", <http://journals.sagepub.com/page/policies/text-and-data-mining-license>;
        version="tdm"; rel="license"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '18738'
      Server:
      - http-kit
      Date:
      - Mon, 12 Oct 2020 20:19:19 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Mon, 12 Oct 2020 20:19:20 GMT
recorded_with: VCR 3.0.3
