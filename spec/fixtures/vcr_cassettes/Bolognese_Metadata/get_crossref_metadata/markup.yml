---
http_interactions:
- request:
    method: get
    uri: https://doi.org/ra/10.1098
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.9; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Sun, 06 Jun 2021 11:56:52 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Connection:
      - keep-alive
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 0a82c7eb3000004a6e7c2f0000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Report-To:
      - '{"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v2?s=wuh5yl%2Fb7PdIKHB28B4lVAPEhLvsFiwvUoMmwpqs8vV9o%2BZzGOOVHMN2DQKAFF6wQVgmk%2Bqlb0CYSpXCCVzdYK3xA0msPFemrjE6%2Fw01A0zJiwKK1WUUkBcGq0Dy0UoE"}],"group":"cf-nel","max_age":604800}'
      Nel:
      - '{"report_to":"cf-nel","max_age":604800}'
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Server:
      - cloudflare
      Cf-Ray:
      - 65b175bebdaa4a6e-FRA
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400, h3=":443";
        ma=86400
    body:
      encoding: ASCII-8BIT
      string: |-
        [
          {
            "DOI": "10.1098",
            "RA": "Crossref"
          }
        ]
    http_version:
  recorded_at: Sun, 06 Jun 2021 11:56:44 GMT
- request:
    method: get
    uri: https://api.crossref.org/works/10.1098/rspb.2017.0132/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.9; mailto:info@datacite.org)
      Accept:
      - text/xml
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.1098/rspb.2017.0132>; rel="canonical", <https://royalsocietypublishing.org/doi/pdf/10.1098/rspb.2017.0132>;
        version="vor"; type="application/pdf"; rel="item", <https://royalsocietypublishing.org/doi/full-xml/10.1098/rspb.2017.0132>;
        version="vor"; type="application/xml"; rel="item", <https://royalsocietypublishing.org/doi/pdf/10.1098/rspb.2017.0132>;
        version="vor"; rel="item", <https://royalsociety.org/journals/ethics-policies/data-sharing-mining/>;
        version="tdm"; rel="license", <http://orcid.org/0000-0003-1406-0680>; title="Liam
        R. Dougherty"; rel="author", <http://orcid.org/0000-0001-6072-3807>; title="Kathryn
        B. McNamara"; rel="author", <http://orcid.org/0000-0003-0562-1474>; title="Leigh
        W. Simmons"; rel="author"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '20184'
      Server:
      - http-kit
      Date:
      - Sun, 06 Jun 2021 11:56:53 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Permissions-Policy:
      - interest-cohort=()
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Sun, 06 Jun 2021 11:56:44 GMT
recorded_with: VCR 3.0.3
