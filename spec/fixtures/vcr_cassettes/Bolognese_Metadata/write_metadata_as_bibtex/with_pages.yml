---
http_interactions:
- request:
    method: get
    uri: https://api.crossref.org/works/10.1155/2012/291294/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.9.4; mailto:info@datacite.org)
      Accept:
      - text/xml;charset=utf-8
      Accept-Encoding:
      - gzip,deflate
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.1155/2012/291294>; rel="canonical", <http://downloads.hindawi.com/journals/pm/2012/291294.pdf>;
        version="vor"; type="application/pdf"; rel="item", <http://downloads.hindawi.com/journals/pm/2012/291294.xml>;
        version="vor"; type="application/xml"; rel="item", <http://downloads.hindawi.com/journals/pm/2012/291294.pdf>;
        version="vor"; rel="item", <http://creativecommons.org/licenses/by/3.0/>;
        rel="license", <http://orcid.org/0000-0003-2043-4925>; title="Beatriz Hernandez";
        rel="author"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '15771'
      Server:
      - http-kit
      Date:
      - Wed, 09 Jun 2021 06:16:28 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Permissions-Policy:
      - interest-cohort=()
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPGNyb3NzcmVmX3Jlc3VsdCB4bWxucz0iaHR0cDovL3d3dy5jcm9zc3JlZi5vcmcvcXJzY2hlbWEvMy4wIiB2ZXJzaW9uPSIzLjAiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL3d3dy5jcm9zc3JlZi5vcmcvcXJzY2hlbWEvMy4wIGh0dHA6Ly93d3cuY3Jvc3NyZWYub3JnL3NjaGVtYXMvY3Jvc3NyZWZfcXVlcnlfb3V0cHV0My4wLnhzZCI+DQogIDxxdWVyeV9yZXN1bHQ+DQogICAgPGhlYWQ+DQogICAgICA8ZG9pX2JhdGNoX2lkPm5vbmU8L2RvaV9iYXRjaF9pZD4NCiAgICA8L2hlYWQ+DQogICAgPGJvZHk+DQogICAgICA8cXVlcnkgc3RhdHVzPSJyZXNvbHZlZCI+DQogICAgICAgIDxkb2kgdHlwZT0iam91cm5hbF9hcnRpY2xlIj4xMC4xMTU1LzIwMTIvMjkxMjk0PC9kb2k+DQogICAgICAgIDxjcm0taXRlbSBuYW1lPSJwdWJsaXNoZXItbmFtZSIgdHlwZT0ic3RyaW5nIj5IaW5kYXdpIExpbWl0ZWQ8L2NybS1pdGVtPg0KICAgICAgICA8Y3JtLWl0ZW0gbmFtZT0icHJlZml4LW5hbWUiIHR5cGU9InN0cmluZyI+SGluZGF3aSBMaW1pdGVkPC9jcm0taXRlbT4NCiAgICAgICAgPGNybS1pdGVtIG5hbWU9Im1lbWJlci1pZCIgdHlwZT0ibnVtYmVyIj45ODwvY3JtLWl0ZW0+DQogICAgICAgIDxjcm0taXRlbSBuYW1lPSJjaXRhdGlvbi1pZCIgdHlwZT0ibnVtYmVyIj41OTI5OTA2ODwvY3JtLWl0ZW0+DQogICAgICAgIDxjcm0taXRlbSBuYW1lPSJqb3VybmFsLWlkIiB0eXBlPSJudW1iZXIiPjEwMzEyNTwvY3JtLWl0ZW0+DQogICAgICAgIDxjcm0taXRlbSBuYW1lPSJkZXBvc2l0LXRpbWVzdGFtcCIgdHlwZT0ibnVtYmVyIj4yMDE2MDgwMjAzNDEyNTwvY3JtLWl0ZW0+DQogICAgICAgIDxjcm0taXRlbSBuYW1lPSJvd25lci1wcmVmaXgiIHR5cGU9InN0cmluZyI+MTAuMTE1NTwvY3JtLWl0ZW0+DQogICAgICAgIDxjcm0taXRlbSBuYW1lPSJsYXN0LXVwZGF0ZSIgdHlwZT0iZGF0ZSI+MjAxNi0wOC0wMlQxNDo0Mjo0MVo8L2NybS1pdGVtPg0KICAgICAgICA8Y3JtLWl0ZW0gbmFtZT0iY3JlYXRlZCIgdHlwZT0iZGF0ZSI+MjAxMi0xMi0zMFQxNjowNTowMVo8L2NybS1pdGVtPg0KICAgICAgICA8Y3JtLWl0ZW0gbmFtZT0iY2l0ZWRieS1jb3VudCIgdHlwZT0ibnVtYmVyIj4yNzwvY3JtLWl0ZW0+DQogICAgICAgIDxkb2lfcmVjb3JkPg0KICAgICAgICAgIDxjcm9zc3JlZiB4bWxucz0iaHR0cDovL3d3dy5jcm9zc3JlZi5vcmcveHNjaGVtYS8xLjEiIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL3d3dy5jcm9zc3JlZi5vcmcveHNjaGVtYS8xLjEgaHR0cDovL2RvaS5jcm9zc3JlZi5vcmcvc2NoZW1hcy91bml4cmVmMS4xLnhzZCI+DQogICAgICAgICAgICA8am91cm5hbD4NCiAgICAgICAgICAgICAgPGpvdXJuYWxfbWV0YWRhdGEgbGFuZ3VhZ2U9ImVuIj4NCiAgICAgICAgICAgICAgICA8ZnVsbF90aXRsZT5QdWxtb25hcnkgTWVkaWNpbmU8L2Z1bGxfdGl0bGU+DQogICAgICAgICAgICAgICAgPGFiYnJldl90aXRsZT5QdWxtb25hcnkgTWVkaWNpbmU8L2FiYnJldl90aXRsZT4NCiAgICAgICAgICAgICAgICA8aXNzbiBtZWRpYV90eXBlPSJwcmludCI+MjA5MC0xODM2PC9pc3NuPg0KICAgICAgICAgICAgICAgIDxpc3NuIG1lZGlhX3R5cGU9ImVsZWN0cm9uaWMiPjIwOTAtMTg0NDwvaXNzbj4NCiAgICAgICAgICAgICAgPC9qb3VybmFsX21ldGFkYXRhPg0KICAgICAgICAgICAgICA8am91cm5hbF9pc3N1ZT4NCiAgICAgICAgICAgICAgICA8cHVibGljYXRpb25fZGF0ZSBtZWRpYV90eXBlPSJwcmludCI+DQogICAgICAgICAgICAgICAgICA8eWVhcj4yMDEyPC95ZWFyPg0KICAgICAgICAgICAgICAgIDwvcHVibGljYXRpb25fZGF0ZT4NCiAgICAgICAgICAgICAgICA8am91cm5hbF92b2x1bWU+DQogICAgICAgICAgICAgICAgICA8dm9sdW1lPjIwMTI8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICA8L2pvdXJuYWxfdm9sdW1lPg0KICAgICAgICAgICAgICA8L2pvdXJuYWxfaXNzdWU+DQogICAgICAgICAgICAgIDxqb3VybmFsX2FydGljbGUgcHVibGljYXRpb25fdHlwZT0iZnVsbF90ZXh0Ij4NCiAgICAgICAgICAgICAgICA8dGl0bGVzPg0KICAgICAgICAgICAgICAgICAgPHRpdGxlPkRlbGluZWF0aW5nIGEgUmV0ZXN0aW5nIFpvbmUgVXNpbmcgUmVjZWl2ZXIgT3BlcmF0aW5nIENoYXJhY3RlcmlzdGljIEFuYWx5c2lzIG9uIFNlcmlhbCBRdWFudGlGRVJPTiBUdWJlcmN1bG9zaXMgVGVzdCBSZXN1bHRzIGluIFVTIEhlYWx0aGNhcmUgV29ya2VyczwvdGl0bGU+DQogICAgICAgICAgICAgICAgPC90aXRsZXM+DQogICAgICAgICAgICAgICAgPGNvbnRyaWJ1dG9ycz4NCiAgICAgICAgICAgICAgICAgIDxwZXJzb25fbmFtZSBzZXF1ZW5jZT0iZmlyc3QiIGNvbnRyaWJ1dG9yX3JvbGU9ImF1dGhvciI+DQogICAgICAgICAgICAgICAgICAgIDxnaXZlbl9uYW1lPldlbmR5PC9naXZlbl9uYW1lPg0KICAgICAgICAgICAgICAgICAgICA8c3VybmFtZT5UaGFuYXNzaTwvc3VybmFtZT4NCiAgICAgICAgICAgICAgICAgICAgPGFmZmlsaWF0aW9uPkRlcGFydG1lbnQgb2YgTWVkaWNpbmUsIFZldGVyYW5zIEFmZmFpcnMgUGFsbyBBbHRvIEhlYWx0aCBDYXJlIFN5c3RlbSwgMzgwMSBNaXJhbmRhIEF2ZW51ZSBNQy0sIFBhbG8gQWx0bywgQ0EgOTQzMDQtMTIwNywgVVNBPC9hZmZpbGlhdGlvbj4NCiAgICAgICAgICAgICAgICAgICAgPGFmZmlsaWF0aW9uPk9jY3VwYXRpb25hbCBIZWFsdGggU3RyYXRlZ2ljIEhlYWx0aCBDYXJlIEdyb3VwLCBPZmZpY2Ugb2YgUHVibGljIEhlYWx0aCwgVmV0ZXJhbnMgSGVhbHRoIEFkbWluaXN0cmF0aW9uLCBXYXNoaW5ndG9uLCBEQyAyMDAwNiwgVVNBPC9hZmZpbGlhdGlvbj4NCiAgICAgICAgICAgICAgICAgICAgPGFmZmlsaWF0aW9uPkRpdmlzaW9uIG9mIEVtZXJnZW5jeSBNZWRpY2luZSwgU3RhbmZvcmQgVW5pdmVyc2l0eSBTY2hvb2wgb2YgTWVkaWNpbmUsIFN0YW5mb3JkLCBDQSA5NDMwNCwgVVNBPC9hZmZpbGlhdGlvbj4NCiAgICAgICAgICAgICAgICAgICAgPGFmZmlsaWF0aW9uPldhciBSZWxhdGVkIElsbG5lc3MgYW5kIEluanVyeSBTdHVkeSBDZW50ZXIgKFdSSUlTQykgYW5kIE1lbnRhbCBJbGxuZXNzIFJlc2VhcmNoIEVkdWNhdGlvbiBhbmQgQ2xpbmljYWwgQ2VudGVyIChNSVJFQ0MpLCBEZXBhcnRtZW50IG9mIFZldGVyYW5zIEFmZmFpcnMsIFBhbG8gQWx0bywgQ0EgOTQzMDQsIFVTQTwvYWZmaWxpYXRpb24+DQogICAgICAgICAgICAgICAgICA8L3BlcnNvbl9uYW1lPg0KICAgICAgICAgICAgICAgICAgPHBlcnNvbl9uYW1lIHNlcXVlbmNlPSJhZGRpdGlvbmFsIiBjb250cmlidXRvcl9yb2xlPSJhdXRob3IiPg0KICAgICAgICAgICAgICAgICAgICA8Z2l2ZW5fbmFtZT5BcnQ8L2dpdmVuX25hbWU+DQogICAgICAgICAgICAgICAgICAgIDxzdXJuYW1lPk5vZGE8L3N1cm5hbWU+DQogICAgICAgICAgICAgICAgICAgIDxhZmZpbGlhdGlvbj5XYXIgUmVsYXRlZCBJbGxuZXNzIGFuZCBJbmp1cnkgU3R1ZHkgQ2VudGVyIChXUklJU0MpIGFuZCBNZW50YWwgSWxsbmVzcyBSZXNlYXJjaCBFZHVjYXRpb24gYW5kIENsaW5pY2FsIENlbnRlciAoTUlSRUNDKSwgRGVwYXJ0bWVudCBvZiBWZXRlcmFucyBBZmZhaXJzLCBQYWxvIEFsdG8sIENBIDk0MzA0LCBVU0E8L2FmZmlsaWF0aW9uPg0KICAgICAgICAgICAgICAgICAgICA8YWZmaWxpYXRpb24+RGVwYXJ0bWVudCBvZiBQc3ljaGlhdHJ5IGFuZCBCZWhhdmlvcmFsIFNjaWVuY2VzLCBTdGFuZm9yZCBVbml2ZXJzaXR5IFNjaG9vbCBvZiBNZWRpY2luZSwgU3RhbmZvcmQsIENBIDk0MzA0LCBVU0E8L2FmZmlsaWF0aW9uPg0KICAgICAgICAgICAgICAgICAgPC9wZXJzb25fbmFtZT4NCiAgICAgICAgICAgICAgICAgIDxwZXJzb25fbmFtZSBzZXF1ZW5jZT0iYWRkaXRpb25hbCIgY29udHJpYnV0b3Jfcm9sZT0iYXV0aG9yIj4NCiAgICAgICAgICAgICAgICAgICAgPGdpdmVuX25hbWU+QmVhdHJpejwvZ2l2ZW5fbmFtZT4NCiAgICAgICAgICAgICAgICAgICAgPHN1cm5hbWU+SGVybmFuZGV6PC9zdXJuYW1lPg0KICAgICAgICAgICAgICAgICAgICA8YWZmaWxpYXRpb24+V2FyIFJlbGF0ZWQgSWxsbmVzcyBhbmQgSW5qdXJ5IFN0dWR5IENlbnRlciAoV1JJSVNDKSBhbmQgTWVudGFsIElsbG5lc3MgUmVzZWFyY2ggRWR1Y2F0aW9uIGFuZCBDbGluaWNhbCBDZW50ZXIgKE1JUkVDQyksIERlcGFydG1lbnQgb2YgVmV0ZXJhbnMgQWZmYWlycywgUGFsbyBBbHRvLCBDQSA5NDMwNCwgVVNBPC9hZmZpbGlhdGlvbj4NCiAgICAgICAgICAgICAgICAgICAgPGFmZmlsaWF0aW9uPkRlcGFydG1lbnQgb2YgUHN5Y2hpYXRyeSBhbmQgQmVoYXZpb3JhbCBTY2llbmNlcywgU3RhbmZvcmQgVW5pdmVyc2l0eSBTY2hvb2wgb2YgTWVkaWNpbmUsIFN0YW5mb3JkLCBDQSA5NDMwNCwgVVNBPC9hZmZpbGlhdGlvbj4NCiAgICAgICAgICAgICAgICAgICAgPE9SQ0lEIGF1dGhlbnRpY2F0ZWQ9InRydWUiPmh0dHA6Ly9vcmNpZC5vcmcvMDAwMC0wMDAzLTIwNDMtNDkyNTwvT1JDSUQ+DQogICAgICAgICAgICAgICAgICA8L3BlcnNvbl9uYW1lPg0KICAgICAgICAgICAgICAgICAgPHBlcnNvbl9uYW1lIHNlcXVlbmNlPSJhZGRpdGlvbmFsIiBjb250cmlidXRvcl9yb2xlPSJhdXRob3IiPg0KICAgICAgICAgICAgICAgICAgICA8Z2l2ZW5fbmFtZT5KZWZmZXJ5PC9naXZlbl9uYW1lPg0KICAgICAgICAgICAgICAgICAgICA8c3VybmFtZT5OZXdlbGw8L3N1cm5hbWU+DQogICAgICAgICAgICAgICAgICAgIDxhZmZpbGlhdGlvbj5XYXIgUmVsYXRlZCBJbGxuZXNzIGFuZCBJbmp1cnkgU3R1ZHkgQ2VudGVyIChXUklJU0MpIGFuZCBNZW50YWwgSWxsbmVzcyBSZXNlYXJjaCBFZHVjYXRpb24gYW5kIENsaW5pY2FsIENlbnRlciAoTUlSRUNDKSwgRGVwYXJ0bWVudCBvZiBWZXRlcmFucyBBZmZhaXJzLCBQYWxvIEFsdG8sIENBIDk0MzA0LCBVU0E8L2FmZmlsaWF0aW9uPg0KICAgICAgICAgICAgICAgICAgPC9wZXJzb25fbmFtZT4NCiAgICAgICAgICAgICAgICAgIDxwZXJzb25fbmFtZSBzZXF1ZW5jZT0iYWRkaXRpb25hbCIgY29udHJpYnV0b3Jfcm9sZT0iYXV0aG9yIj4NCiAgICAgICAgICAgICAgICAgICAgPGdpdmVuX25hbWU+UGF1bDwvZ2l2ZW5fbmFtZT4NCiAgICAgICAgICAgICAgICAgICAgPHN1cm5hbWU+VGVycGVsdWs8L3N1cm5hbWU+DQogICAgICAgICAgICAgICAgICAgIDxhZmZpbGlhdGlvbj5EZXBhcnRtZW50IG9mIE9jY3VwYXRpb25hbCBIZWFsdGgsIFRoZSBDbGV2ZWxhbmQgQ2xpbmljLCBDbGV2ZWxhbmQsIE9IIDQ0MTk1LCBVU0E8L2FmZmlsaWF0aW9uPg0KICAgICAgICAgICAgICAgICAgPC9wZXJzb25fbmFtZT4NCiAgICAgICAgICAgICAgICAgIDxwZXJzb25fbmFtZSBzZXF1ZW5jZT0iYWRkaXRpb25hbCIgY29udHJpYnV0b3Jfcm9sZT0iYXV0aG9yIj4NCiAgICAgICAgICAgICAgICAgICAgPGdpdmVuX25hbWU+RGF2aWQ8L2dpdmVuX25hbWU+DQogICAgICAgICAgICAgICAgICAgIDxzdXJuYW1lPk1hcmRlcjwvc3VybmFtZT4NCiAgICAgICAgICAgICAgICAgICAgPGFmZmlsaWF0aW9uPlVuaXZlcnNpdHkgSGVhbHRoIFNlcnZpY2VzLCBVbml2ZXJzaXR5IG9mIElsbGlub2lzIENoaWNhZ28sIENoaWNhZ28sIElMIDYwNjEyLCBVU0E8L2FmZmlsaWF0aW9uPg0KICAgICAgICAgICAgICAgICAgPC9wZXJzb25fbmFtZT4NCiAgICAgICAgICAgICAgICAgIDxwZXJzb25fbmFtZSBzZXF1ZW5jZT0iYWRkaXRpb25hbCIgY29udHJpYnV0b3Jfcm9sZT0iYXV0aG9yIj4NCiAgICAgICAgICAgICAgICAgICAgPGdpdmVuX25hbWU+SmVyb21lIEEuPC9naXZlbl9uYW1lPg0KICAgICAgICAgICAgICAgICAgICA8c3VybmFtZT5ZZXNhdmFnZTwvc3VybmFtZT4NCiAgICAgICAgICAgICAgICAgICAgPGFmZmlsaWF0aW9uPldhciBSZWxhdGVkIElsbG5lc3MgYW5kIEluanVyeSBTdHVkeSBDZW50ZXIgKFdSSUlTQykgYW5kIE1lbnRhbCBJbGxuZXNzIFJlc2VhcmNoIEVkdWNhdGlvbiBhbmQgQ2xpbmljYWwgQ2VudGVyIChNSVJFQ0MpLCBEZXBhcnRtZW50IG9mIFZldGVyYW5zIEFmZmFpcnMsIFBhbG8gQWx0bywgQ0EgOTQzMDQsIFVTQTwvYWZmaWxpYXRpb24+DQogICAgICAgICAgICAgICAgICAgIDxhZmZpbGlhdGlvbj5EZXBhcnRtZW50IG9mIFBzeWNoaWF0cnkgYW5kIEJlaGF2aW9yYWwgU2NpZW5jZXMsIFN0YW5mb3JkIFVuaXZlcnNpdHkgU2Nob29sIG9mIE1lZGljaW5lLCBTdGFuZm9yZCwgQ0EgOTQzMDQsIFVTQTwvYWZmaWxpYXRpb24+DQogICAgICAgICAgICAgICAgICA8L3BlcnNvbl9uYW1lPg0KICAgICAgICAgICAgICAgIDwvY29udHJpYnV0b3JzPg0KICAgICAgICAgICAgICAgIDxqYXRzOmFic3RyYWN0IHhtbG5zOmphdHM9Imh0dHA6Ly93d3cubmNiaS5ubG0ubmloLmdvdi9KQVRTMSI+DQogICAgICAgICAgICAgICAgICA8amF0czpwPg0KICAgICAgICAgICAgICAgICAgICA8amF0czppdGFsaWM+T2JqZWN0aXZlPC9qYXRzOml0YWxpYz4NCiAgICAgICAgICAgICAgICAgICAgLiBUbyBmaW5kIGEgc3RhdGlzdGljYWxseSBzaWduaWZpY2FudCBzZXBhcmF0aW9uIHBvaW50IGZvciB0aGUgUXVhbnRpRkVST04gR29sZCBJbi1UdWJlIChRRlQpIGludGVyZmVyb24gZ2FtbWEgcmVsZWFzZSBhc3NheSB0aGF0IGNvdWxkIGRlZmluZSBhbiBvcHRpbWFsIOKAnHJldGVzdGluZyB6b25l4oCdIGZvciB1c2UgaW4gc2VyaWFsbHkgdGVzdGVkIGxvdy1yaXNrIHBvcHVsYXRpb25zIHdobyBoYXZlIHRlc3Qg4oCccmV2ZXJzaW9uc+KAnSBmcm9tIGluaXRpYWxseSBwb3NpdGl2ZSB0byBzdWJzZXF1ZW50bHkgbmVnYXRpdmUgcmVzdWx0cy4NCiAgICAgICAgICAgICAgICAgICAgPGphdHM6aXRhbGljPk1ldGhvZDwvamF0czppdGFsaWM+DQogICAgICAgICAgICAgICAgICAgIC4gVXNpbmcgcmVjZWl2ZXIgb3BlcmF0aW5nIGNoYXJhY3RlcmlzdGljIGFuYWx5c2lzIChST0MpIHRvIGFuYWx5emUgcmV0cm9zcGVjdGl2ZSBkYXRhIGNvbGxlY3RlZCBmcm9tIDMgbWFqb3IgaG9zcGl0YWxzLCB3ZSBzZWFyY2hlZCBmb3IgcHJlZGljdG9ycyBvZiByZXZlcnNpb24gdW50aWwgc3RhdGlzdGljYWxseSBzaWduaWZpY2FudCBzZXBhcmF0aW9uIHBvaW50cyB3ZXJlIHJldmVhbGVkLiBBIGNvbmZpcm1hdG9yeSByZWdyZXNzaW9uIGFuYWx5c2lzIHdhcyBwZXJmb3JtZWQgb24gYW4gYWRkaXRpb25hbCBzYW1wbGUuDQogICAgICAgICAgICAgICAgICAgIDxqYXRzOml0YWxpYz5SZXN1bHRzPC9qYXRzOml0YWxpYz4NCiAgICAgICAgICAgICAgICAgICAgLiBJbiA1NzUgaW5pdGlhbGx5IHBvc2l0aXZlIFVTIGhlYWx0aGNhcmUgd29ya2VycyAoSENXcyksIDMwMCAoNTIuMiUpIGhhZCByZXZlcnNpb25zLCB3aGlsZSAyNzUgKDQ3LjglKSBoYWQgdHdvIHNlcXVlbnRpYWwgcG9zaXRpdmUgdGVzdHMuIFRoZSBtb3N0IHN0YXRpc3RpY2FsbHkgc2lnbmlmaWNhbnQgKEthcHBh4oCJPeKAiTAuNDgsIGNoaS1zcXVhcmXigIk94oCJMTMxLjAsDQogICAgICAgICAgICAgICAgICAgIDxtbWw6bWF0aCB4bWxuczptbWw9Imh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwiIGlkPSJNMSI+DQogICAgICAgICAgICAgICAgICAgICAgPG1tbDptcm93Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPG1tbDptaT5QPC9tbWw6bWk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bW1sOm1vPiZsdDs8L21tbDptbz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxtbWw6bW4+MC4wMDE8L21tbDptbj4NCiAgICAgICAgICAgICAgICAgICAgICA8L21tbDptcm93Pg0KICAgICAgICAgICAgICAgICAgICA8L21tbDptYXRoPg0KICAgICAgICAgICAgICAgICAgICApIHNlcGFyYXRpb24gcG9pbnQgaWRlbnRpZmllZCBieSB0aGUgUk9DIGZvciBwcmVkaWN0aW5nIHJldmVyc2lvbiB3YXMgdGhlIHR1YmVyY3Vsb3NpcyBhbnRpZ2VuIG1pbnVzLW5pbCAoVEJhZy1uaWwpIHZhbHVlIGF0IDEuMTEgSW50ZXJuYXRpb25hbCBVbml0cyBwZXIgbWlsbGlsaXRlciAoSVUvbUwpLiBUaGUgc2Vjb25kIHNlcGFyYXRpb24gcG9pbnQgd2FzIGZvdW5kIGF0IFRCYWctbmlsIGF0IDAuNzLigIlJVS9tTCAoS2FwcGHigIk94oCJMC4xNiwgY2hpLXNxdWFyZeKAiT3igIk4LjIsDQogICAgICAgICAgICAgICAgICAgIDxtbWw6bWF0aCB4bWxuczptbWw9Imh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwiIGlkPSJNMiI+DQogICAgICAgICAgICAgICAgICAgICAgPG1tbDptcm93Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPG1tbDptaT5QPC9tbWw6bWk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bW1sOm1vPiZsdDs8L21tbDptbz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxtbWw6bW4+MC4wMTwvbW1sOm1uPg0KICAgICAgICAgICAgICAgICAgICAgIDwvbW1sOm1yb3c+DQogICAgICAgICAgICAgICAgICAgIDwvbW1sOm1hdGg+DQogICAgICAgICAgICAgICAgICAgICkuIFRoZSBtb2RlbCB3YXMgdmFsaWRhdGVkIGJ5IHRoZSByZWdyZXNzaW9uIGFuYWx5c2lzIG9mIDI4N+KAiUhDV3MuDQogICAgICAgICAgICAgICAgICAgIDxqYXRzOml0YWxpYz5Db25jbHVzaW9uPC9qYXRzOml0YWxpYz4NCiAgICAgICAgICAgICAgICAgICAgLiBSZXZlcnNpb24gbGlrZWxpaG9vZCBpbmNyZWFzZXMgYXMgdGhlIFRCYWctbmlsIGFwcHJvYWNoZXMgdGhlIG1hbnVmYWN0dXJlcidzIGN1dC1wb2ludCBvZiAwLjM14oCJSVUvbUwuIFRoZSBtb3N0IHN0YXRpc3RpY2FsbHkgc2lnbmlmaWNhbnQgc2VwYXJhdGlvbiBwb2ludCBiZXR3ZWVuIHRob3NlIHdobyB0ZXN0IHJlcGVhdGVkbHkgcG9zaXRpdmUgYW5kIHRob3NlIHdobyByZXZlcnQgaXMgMS4xMeKAiUlVL21MLiBDbGluaWNpYW5zIHNob3VsZCByZXRlc3QgbG93LXJpc2sgaW5kaXZpZHVhbHMgd2l0aCBpbml0aWFsIFFGVCByZXN1bHRz4oCJJmx0O+KAiTEuMTHigIlJVS9tTC4NCiAgICAgICAgICAgICAgICAgIDwvamF0czpwPg0KICAgICAgICAgICAgICAgIDwvamF0czphYnN0cmFjdD4NCiAgICAgICAgICAgICAgICA8cHVibGljYXRpb25fZGF0ZSBtZWRpYV90eXBlPSJwcmludCI+DQogICAgICAgICAgICAgICAgICA8eWVhcj4yMDEyPC95ZWFyPg0KICAgICAgICAgICAgICAgIDwvcHVibGljYXRpb25fZGF0ZT4NCiAgICAgICAgICAgICAgICA8cGFnZXM+DQogICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4xPC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgPGxhc3RfcGFnZT43PC9sYXN0X3BhZ2U+DQogICAgICAgICAgICAgICAgPC9wYWdlcz4NCiAgICAgICAgICAgICAgICA8cHVibGlzaGVyX2l0ZW0+DQogICAgICAgICAgICAgICAgICA8aWRlbnRpZmllciBpZF90eXBlPSJwaWkiPjI5MTI5NDwvaWRlbnRpZmllcj4NCiAgICAgICAgICAgICAgICAgIDxpZGVudGlmaWVyIGlkX3R5cGU9Im90aGVyIj4yOTEyOTQ8L2lkZW50aWZpZXI+DQogICAgICAgICAgICAgICAgPC9wdWJsaXNoZXJfaXRlbT4NCiAgICAgICAgICAgICAgICA8YWk6cHJvZ3JhbSB4bWxuczphaT0iaHR0cDovL3d3dy5jcm9zc3JlZi5vcmcvQWNjZXNzSW5kaWNhdG9ycy54c2QiIG5hbWU9IkFjY2Vzc0luZGljYXRvcnMiPg0KICAgICAgICAgICAgICAgICAgPGFpOmxpY2Vuc2VfcmVmPmh0dHA6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LzMuMC88L2FpOmxpY2Vuc2VfcmVmPg0KICAgICAgICAgICAgICAgIDwvYWk6cHJvZ3JhbT4NCiAgICAgICAgICAgICAgICA8ZG9pX2RhdGE+DQogICAgICAgICAgICAgICAgICA8ZG9pPjEwLjExNTUvMjAxMi8yOTEyOTQ8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDx0aW1lc3RhbXA+MjAxNjA4MDIwMzQxMjU8L3RpbWVzdGFtcD4NCiAgICAgICAgICAgICAgICAgIDxyZXNvdXJjZT5odHRwOi8vd3d3LmhpbmRhd2kuY29tL2pvdXJuYWxzL3BtLzIwMTIvMjkxMjk0LzwvcmVzb3VyY2U+DQogICAgICAgICAgICAgICAgICA8Y29sbGVjdGlvbiBwcm9wZXJ0eT0idGV4dC1taW5pbmciIHNldGJ5SUQ9ImhpbmRhd2kiPg0KICAgICAgICAgICAgICAgICAgICA8aXRlbT4NCiAgICAgICAgICAgICAgICAgICAgICA8cmVzb3VyY2UgbWltZV90eXBlPSJhcHBsaWNhdGlvbi9wZGYiPmh0dHA6Ly9kb3dubG9hZHMuaGluZGF3aS5jb20vam91cm5hbHMvcG0vMjAxMi8yOTEyOTQucGRmPC9yZXNvdXJjZT4NCiAgICAgICAgICAgICAgICAgICAgPC9pdGVtPg0KICAgICAgICAgICAgICAgICAgICA8aXRlbT4NCiAgICAgICAgICAgICAgICAgICAgICA8cmVzb3VyY2UgbWltZV90eXBlPSJhcHBsaWNhdGlvbi94bWwiPmh0dHA6Ly9kb3dubG9hZHMuaGluZGF3aS5jb20vam91cm5hbHMvcG0vMjAxMi8yOTEyOTQueG1sPC9yZXNvdXJjZT4NCiAgICAgICAgICAgICAgICAgICAgPC9pdGVtPg0KICAgICAgICAgICAgICAgICAgPC9jb2xsZWN0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNvbGxlY3Rpb24gcHJvcGVydHk9ImNyYXdsZXItYmFzZWQiIHNldGJ5SUQ9ImhpbmRhd2kiPg0KICAgICAgICAgICAgICAgICAgICA8aXRlbSBjcmF3bGVyPSJnb29nbGUiPg0KICAgICAgICAgICAgICAgICAgICAgIDxyZXNvdXJjZT5odHRwOi8vZG93bmxvYWRzLmhpbmRhd2kuY29tL2pvdXJuYWxzL3BtLzIwMTIvMjkxMjk0LnBkZjwvcmVzb3VyY2U+DQogICAgICAgICAgICAgICAgICAgIDwvaXRlbT4NCiAgICAgICAgICAgICAgICAgICAgPGl0ZW0gY3Jhd2xlcj0ibXNuIj4NCiAgICAgICAgICAgICAgICAgICAgICA8cmVzb3VyY2U+aHR0cDovL2Rvd25sb2Fkcy5oaW5kYXdpLmNvbS9qb3VybmFscy9wbS8yMDEyLzI5MTI5NC5wZGY8L3Jlc291cmNlPg0KICAgICAgICAgICAgICAgICAgICA8L2l0ZW0+DQogICAgICAgICAgICAgICAgICAgIDxpdGVtIGNyYXdsZXI9ImFsdGF2aXN0YSI+DQogICAgICAgICAgICAgICAgICAgICAgPHJlc291cmNlPmh0dHA6Ly9kb3dubG9hZHMuaGluZGF3aS5jb20vam91cm5hbHMvcG0vMjAxMi8yOTEyOTQucGRmPC9yZXNvdXJjZT4NCiAgICAgICAgICAgICAgICAgICAgPC9pdGVtPg0KICAgICAgICAgICAgICAgICAgICA8aXRlbSBjcmF3bGVyPSJ5YWhvbyI+DQogICAgICAgICAgICAgICAgICAgICAgPHJlc291cmNlPmh0dHA6Ly9kb3dubG9hZHMuaGluZGF3aS5jb20vam91cm5hbHMvcG0vMjAxMi8yOTEyOTQucGRmPC9yZXNvdXJjZT4NCiAgICAgICAgICAgICAgICAgICAgPC9pdGVtPg0KICAgICAgICAgICAgICAgICAgICA8aXRlbSBjcmF3bGVyPSJzY2lydXMiPg0KICAgICAgICAgICAgICAgICAgICAgIDxyZXNvdXJjZT5odHRwOi8vZG93bmxvYWRzLmhpbmRhd2kuY29tL2pvdXJuYWxzL3BtLzIwMTIvMjkxMjk0LnBkZjwvcmVzb3VyY2U+DQogICAgICAgICAgICAgICAgICAgIDwvaXRlbT4NCiAgICAgICAgICAgICAgICAgICAgPGl0ZW0gY3Jhd2xlcj0iaVBhcmFkaWdtcyI+DQogICAgICAgICAgICAgICAgICAgICAgPHJlc291cmNlPmh0dHA6Ly9kb3dubG9hZHMuaGluZGF3aS5jb20vam91cm5hbHMvcG0vMjAxMi8yOTEyOTQucGRmPC9yZXNvdXJjZT4NCiAgICAgICAgICAgICAgICAgICAgPC9pdGVtPg0KICAgICAgICAgICAgICAgICAgPC9jb2xsZWN0aW9uPg0KICAgICAgICAgICAgICAgIDwvZG9pX2RhdGE+DQogICAgICAgICAgICAgICAgPGNpdGF0aW9uX2xpc3Q+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+QW1lcmljYW4gSm91cm5hbCBvZiBSZXNwaXJhdG9yeSBhbmQgQ3JpdGljYWwgQ2FyZSBNZWRpY2luZTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4xNzk8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDk8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjIiPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pPjEwLjExMjgvQ1ZJLjAwMTY4LTA5PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMyI+DQogICAgICAgICAgICAgICAgICAgIDxkb2k+MTAuMTE2NC9yY2NtLjIwMDYwNC00NzJPQzwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjQiPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pPjEwLjU1ODgvaWp0bGQuMTEuMDM2NDwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjUiPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pPjEwLjExMjgvQ1ZJLjA1MDU4LTExPC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iNiI+DQogICAgICAgICAgICAgICAgICAgIDxkb2k+MTAuMTAwNy9zMDA0MjAtMDEwLTA1NzEteDwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjciPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pPjEwLjEwODYvNTkzOTY1PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iOCI+DQogICAgICAgICAgICAgICAgICAgIDxkb2k+MTAuMTM3OC9jaGVzdC4wOS0yMzUwPC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iOSI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkludGVybmF0aW9uYWwgSm91cm5hbCBvZiBUdWJlcmN1bG9zaXMgYW5kIEx1bmcgRGlzZWFzZTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4xMjwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8aXNzdWU+MTE8L2lzc3VlPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4xMjM1PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAwODwvY1llYXI+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAiPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pPjEwLjEwNTYvTkVKTXNhMDMxNjY3PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTEiPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pPjEwLjEzNzgvY2hlc3QuMTI4LjEuMTE2PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTIiPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxMjwvY1llYXI+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTMiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5Nb3JiaWRpdHkgYW5kIE1vcnRhbGl0eSBXZWVrbHkgUmVwb3J0PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjU5PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxpc3N1ZT41PC9pc3N1ZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MTwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTA8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjE0Ij4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTE8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjE1Ij4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTE8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjE2Ij4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTE8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjE3Ij4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTE8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjE4Ij4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTI8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjIwIj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjE5OTI8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjIyIj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaT4xMC4zMjA1L2Rna2gwMDAxNDg8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIyMyI+DQogICAgICAgICAgICAgICAgICAgIDxkb2k+MTAuMTM3OC9jaGVzdC4xMS0wOTkyPC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMjQiPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pPjEwLjExODYvMTQ3MS0yMzM0LTEwLTIyMDwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjI1Ij4NCiAgICAgICAgICAgICAgICAgICAgPGRvaT4xMC4xMTg2LzE3NDUtNjY3My03LTY8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIyNyI+DQogICAgICAgICAgICAgICAgICAgIDxkb2k+MTAuMTEyOC9DVkkuMDAzOTgtMDc8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIyOCI+DQogICAgICAgICAgICAgICAgICAgIDxkb2k+MTAuMTE2NC9yY2NtLjIwMTAwNi0wOTc0T0M8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIyOSI+DQogICAgICAgICAgICAgICAgICAgIDxkb2k+MTAuMTEzNi90aHguMjAxMC4xNDMxODA8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIzMCI+DQogICAgICAgICAgICAgICAgICAgIDxkb2k+MTAuMTM3OC9jaGVzdC4xMi0wMDQ1PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgIDwvY2l0YXRpb25fbGlzdD4NCiAgICAgICAgICAgICAgPC9qb3VybmFsX2FydGljbGU+DQogICAgICAgICAgICA8L2pvdXJuYWw+DQogICAgICAgICAgPC9jcm9zc3JlZj4NCiAgICAgICAgPC9kb2lfcmVjb3JkPg0KICAgICAgPC9xdWVyeT4NCiAgICA8L2JvZHk+DQogIDwvcXVlcnlfcmVzdWx0Pg0KPC9jcm9zc3JlZl9yZXN1bHQ+
    http_version:
  recorded_at: Wed, 09 Jun 2021 06:16:28 GMT
recorded_with: VCR 3.0.3
