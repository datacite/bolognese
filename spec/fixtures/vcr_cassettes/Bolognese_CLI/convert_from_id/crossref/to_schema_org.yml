---
http_interactions:
- request:
    method: get
    uri: https://doi.org/ra/10.7554
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.9.4; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
      Accept-Encoding:
      - gzip,deflate
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Wed, 09 Jun 2021 12:03:20 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Cf-Cache-Status:
      - DYNAMIC
      Cf-Request-Id:
      - 0a9240e8e300004e1974229000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Report-To:
      - '{"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v2?s=ZBkVD%2FHuRIOj%2BaOjN3xuwNXM7bOmxHyUifbBuuoZ78lbuasYaENim9KC2aIC8IaNsH%2BlOxhtF76YFdpBqfOV65REiaAKH2%2Fc0P2ZxLZIda3QsLc3"}],"group":"cf-nel","max_age":604800}'
      Nel:
      - '{"report_to":"cf-nel","max_age":604800}'
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Server:
      - cloudflare
      Cf-Ray:
      - 65ca37549b0f4e19-FRA
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400, h3=":443";
        ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        H4sIAAAAAAAAA4vmUlCoBmIFBSUXf08lKwUlQwM9c1NTEyUdiGiQI0jQuSi/uLgoNU0JKFjLFQsA4VlVnTYAAAA=
    http_version:
  recorded_at: Wed, 09 Jun 2021 12:03:20 GMT
- request:
    method: get
    uri: https://api.crossref.org/works/10.7554/elife.01567/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.9.4; mailto:info@datacite.org)
      Accept:
      - text/xml;charset=utf-8
      Accept-Encoding:
      - gzip,deflate
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.7554/elife.01567>; rel="canonical", <https://cdn.elifesciences.org/articles/01567/elife-01567-v1.pdf>;
        version="vor"; type="application/pdf"; rel="item", <https://cdn.elifesciences.org/articles/01567/elife-01567-v1.xml>;
        version="vor"; type="application/xml"; rel="item", <http://creativecommons.org/licenses/by/3.0/>;
        version="vor"; rel="license", <http://creativecommons.org/licenses/by/3.0/>;
        version="am"; rel="license", <http://creativecommons.org/licenses/by/3.0/>;
        version="tdm"; rel="license", <http://creativecommons.org/licenses/by/3.0/>;
        version="vor"; rel="license", <http://creativecommons.org/licenses/by/3.0/>;
        version="am"; rel="license", <http://creativecommons.org/licenses/by/3.0/>;
        version="tdm"; rel="license"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '42265'
      Server:
      - http-kit
      Date:
      - Wed, 09 Jun 2021 12:03:21 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Permissions-Policy:
      - interest-cohort=()
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 09 Jun 2021 12:03:21 GMT
recorded_with: VCR 3.0.3
